defpackage curl :
   import core
   import curl/opt

lostanza defn to-uint (i:ref<Int>) -> int :
   val uint-max:int = 2147483647
   return uint-max + 1 + i.value

extern curl_easy_init: () -> ptr<?>
; CURL *curl_easy_init( );

lostanza deftype Handle :
   value: ptr<?>

extern stz_curl_write_mem_cb_set: ptr<?> -> int

public lostanza defn Handle () -> ref<Handle> :
    ; Create handle
    val p:ptr<?> = call-c curl_easy_init()
    val h:ref<Handle> = new Handle{p}

    ;; TODO: Set options here

    ; Set callback and initialize memory
    call-c stz_curl_write_mem_cb_set(h.value)

    return h

; CURLcode curl_global_init(long flags );
extern curl_global_init: long -> int
public lostanza defn cURL () -> ref<False> :
   val status:int = call-c curl_global_init(curl/opt/ALL)
   ; TODO: Add error handling
   return false

extern stz_curl_write_mem_free: () -> int

; void curl_easy_cleanup(CURL * handle );
extern curl_easy_cleanup: ptr<?> -> int
public lostanza defn cleanup (h:ref<Handle>) -> ref<False> :
   val status:int = call-c curl_easy_cleanup(h.value)
   call-c stz_curl_write_mem_free()
   ; TODO: Add error handling
   return false


; void curl_global_cleanup(void);
extern curl_global_cleanup: () -> int
public lostanza defn cleanup () -> ref<False> :
    call-c curl_global_cleanup()
    return false


extern curl_easy_setopt: (ptr<?>, int, ptr<byte>) -> int
extern curl_easy_setopt: (ptr<?>, int, long) -> int
; CURLcode curl_easy_setopt(CURL *handle, CURLoption option, parameter);

public lostanza defn set (h:ref<Handle>, o:ref<Int>, p:ref<String>) -> ref<False> :
   val c:int = call-c curl_easy_setopt(h.value, o.value, addr!(p.chars))
   ; TODO: Add error handling
   return false

public lostanza defn set (h:ref<Handle>, o:ref<Int>, p:ref<Long>) -> ref<False> :
   val c:int = call-c curl_easy_setopt(h.value, o.value, p.value)
   ; TODO: Add error handling
   return false

public lostanza defn set (h:ref<Handle>, o:ref<Int>, p:ref<True|False>) -> ref<False> :
   var bool:long
   match(p) :
      (t:ref<True>)  : bool = 0L
      (f:ref<False>) : bool = 1L
   val c:int = call-c curl_easy_setopt(h.value, o.value, bool)
   ; TODO: Add error handling
   return false

extern stz_curl_write_mem: () -> ptr<byte>
lostanza defn get-write-mem () -> ref<String> :
   return String(call-c stz_curl_write_mem())

; CURLcode curl_easy_perform(CURL * easy_handle );
extern curl_easy_perform: ptr<?> -> int

public lostanza defn perform (h:ref<Handle>) -> ref<String> :
   val c:int = call-c curl_easy_perform(h.value)
   print(String("Performed request, result = "))
   println(String(c))
   ; TODO: Add error handling
   return get-write-mem()


extern curl_easy_getinfo: (ptr<?>, int, ptr<?>) -> int
; CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ... );
